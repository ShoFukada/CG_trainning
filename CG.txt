ubuntu18or20(desktop版)+C言語+OpenGL で実装してください
OpenGLは Ver.3未満を使用し、GLSL は使わないでください
OpenCV の使用は禁止です
画像出力では代わりにlibpng,libjpegを使用してもよいです

0   : OpenGL を使うのに必要なライブラリを調べてください（aptでインストール可）
⚪︎1   : シアンの三角と黄色の正方形を画面に表示してください(triangle,square)
⚪︎2-1 : 立方体を、右斜め上からのカメラアングルで3D表示してください(LookAt関数を使用)(square_lookat)
⚪︎2-2 : glut のteapot を表示する関数を使ってこれを3D表示してください(teapot)
⚪︎3-1 : 同様に、ピラミッド型のモデルの .obj ファイルを自分で作って表示してください(pyramid)
⚪︎3-2 : スタンフォードバニーのモデルデータ(.ply) を取得して .obj に変換してから表示してください（vertexとfaceのみ使用）(bunny)
⚪︎4   : マウス操作でカメラアングルを調整できるようにしてください(kadai4)
        左ドラッグ：平行移動　注視点も平行移動　変位：1000pxで1.0移動など
        右ドラッグ：回転　　　注視点は固定　　　変位： 100pxで90degなど
        中ドラッグ：ズーム　　注視点は固定　　　変位：1000pxで1.0移動など
      カメラの状態の記述では次の変数名を使ってください。
        eye : カメラ位置の座標
        pov : 注視点の座標
        up  : カメラにおける画角上の上向き方向ベクトル（ワールド座標系）
        fovh: 水平方向の視野角 [rad]
        fovv: 垂直方向の視野角 [rad]
      ベクトル演算については、直接成分計算をせず、doubleのポインタを引数にもつ関数を実装して使用してください
        関数の種類：｛和、スカラ倍、長さ、ノーマライズ、内積、外積｝
      ある点の任意軸回転の計算では、四元数ベースの計算を行ってください（理論の概要を理解できたら関数のcコードを渡します）
      ロドリゲスの回転公式を自前で実装するのは禁止します
⚪︎5-1 : ライト（照明）を使って ⚪︎2-1(square_light) ⚪︎2-2(teapot_light) ⚪︎3-1(pyramid_light) 3-2(bunny_light) の3D表示をし、うまく見えるように調整してください
⚪︎5-2 : 3-2について表面が滑らかなうさぎを表示してください。法線ベクトルは計算で求めて.objファイルに含めてください。
(bunny_light)

用語
GULT:OpenGLをより快適に使用するためのライブラリ
OpenGL:三次元のグラフィックスライブラリ
freeglut3:実行に必要なライブラリ
freeglut3-dev:開発用ライブラリ

penGLの座標変換プロセスは、3Dオブジェクトがどのように2D画面に描画されるかを決定するために行われます。このプロセスは、主に以下の4つのステップで構成されています。

モデル変換（Model Transformation）:
モデル変換は、3Dオブジェクトを正しい位置と向きに配置するために行われます。これには、オブジェクトを移動（Translation）、回転（Rotation）、拡大・縮小（Scaling）する操作が含まれます。この操作により、オブジェクトが3D空間内でどこに配置されるかが決定されます。
ビュー変換（View Transformation）:
ビュー変換は、仮想的なカメラ（視点）を配置するために行われます。この変換は、シーン全体を移動・回転させることで、カメラがどこから3Dシーンを見るかを決定します。つまり、カメラの位置と向きを決めることで、3D空間のどの部分が見えるかが決まります。
投影変換（Projection Transformation）:
投影変換は、3D空間のオブジェクトを2D画面に投影する方法を決定します。一般的には、透視投影（Perspective Projection）と平行投影（Orthographic Projection）の2つの方法があります。透視投影は、遠くのオブジェクトが小さく見えるように描画することで、現実世界のような遠近感を作り出します。一方、平行投影は、すべてのオブジェクトが同じ大きさで描画されるため、遠近感がありません。
ビューポート変換（Viewport Transformation）:
ビューポート変換は、投影された2D画像を画面上の正しい位置とサイズに合わせるために行われます。この変換により、2D画像がウィンドウのどの部分に表示されるかが決まります。

これらのステップを組み合わせることで、3Dオブジェクトがどのように2D画面に描画されるかが決定されます。中学生にわかりやすく説明するために、OpenGLの座標変換プロセスは、3D空間にある物体を手で持って、目の前で動かして見るように考えることができます。まず物体を持ち、正しい位置と向きに配置します（モデル変換）。次に、目（カメラ）の位置と向きを決めます（ビュー変換）。この時点で、物体がどのように見えるかが決まります。しかし、実際には目の前の3D空間にある物体を、2Dの平面（画面）に投影しなければなりません。

そこで、物体を目の前で見るときにどのような遠近感があるかを決める投影方法を選びます（投影変換）。これによって、物体が2D画面上でどのような形状で描画されるかが決定されます。

最後に、投影された2D画像を画面上の正しい位置とサイズに合わせます（ビューポート変換）。これにより、画面上に正しく描画される物体の位置とサイズが決まります。

以上のステップによって、3D空間にある物体が2D画面に描画されるプロセスが完成します。これらの変換を組み合わせることで、リアルタイムで3Dグラフィックスを描画することができるのです。


OpenGLでそれぞれの座標変換を行う典型的なコード例を以下に示します。

1. モデル変換（Model Transformation）:

```c
glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
glTranslatef(tx, ty, tz); // 平行移動
glRotatef(angle, rx, ry, rz); // 回転
glScalef(sx, sy, sz); // スケーリング
```

2. ビュー変換（View Transformation）:

```c
glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
gluLookAt(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
```

3. 投影変換（Projection Transformation）:

```c
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluPerspective(fovY, aspect, zNear, zFar); // 透視投影
// または
glOrtho(left, right, bottom, top, near, far); // 平行投影
```

4. ビューポート変換（Viewport Transformation）:

```c
glViewport(x, y, width, height);
```

これらのコード例は、各座標変換に対応するOpenGLの関数を使用しています。モデル変換では、オブジェクトの平行移動、回転、およびスケーリングを行います。ビュー変換では、カメラの位置と向きを設定します。投影変換では、透視投影または平行投影を選択し、クリッピング領域を定義します。ビューポート変換では、変換された座標をウィンドウ上のピクセル座標にマッピングします。


それぞれの座標系には、一般的に以下のような名前があります。

1. モデル変換（Model Transformation）: モデル座標系（Model Coordinates）
   - オブジェクトの位置、回転、スケーリングが定義されています。

2. ビュー変換（View Transformation）: ワールド座標系（World Coordinates）から視点座標系（Eye Coordinates / Camera Coordinates）への変換
   - カメラの位置と向きが定義されています。この変換により、カメラが原点に配置され、シーン内のオブジェクトがカメラに対する相対位置になります。

3. 投影変換（Projection Transformation）: 視点座標系（Eye Coordinates / Camera Coordinates）からクリップ座標系（Clip Coordinates）への変換
   - 透視投影または平行投影が適用され、3次元空間内のオブジェクトが2次元平面に投影されます。この座標系では、クリッピング領域が定義され、表示されるオブジェクトがクリッピングされます。

4. ビューポート変換（Viewport Transformation）: クリップ座標系（Clip Coordinates）からウィンドウ座標系（Window Coordinates）への変換
   - クリップ座標系の正規化デバイス座標（Normalized Device Coordinates）がウィンドウのピクセル座標にマッピングされます。

これらの座標系は、各変換を適用することで、次の座標系に変換されます。例えば、モデル座標系のオブジェクトがモデル変換を経てワールド座標系に変換され、さらにビュー変換、投影変換、ビューポート変換を経て最終的にウィンドウ座標系にマッピングされます。